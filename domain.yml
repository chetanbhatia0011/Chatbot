intents:
- barchart_plotly_reco
- barchart1_reco
- barchart_reco
- barchart_ggplot_reco
- barchart_seaborn_reco
- barchart_bokeh_reco
- barchart_code_reco
- barchart_matplotlib_reco
- code_reco:
    use_entities: []
- barplot_code_reco:
    use_entities: []
- greet
- bye
- thank
- automateEDA_reco
- thankyou
- linechart_reco
- linechart_plotly_reco
- linechart_code_reco
- linechart_bokeh_reco
- linechart_seaborn_reco
- linechart1_reco
- linechart_matplotlib_reco
- linechart_ggplot_reco
- histogram_bokeh_reco
- histogram1_reco
- histogram_seaborn_reco
- histogram_ggplot_reco
- histogram_plotly_reco
- histogram_matplotlib_reco
- histogram_reco
- histogram_code_reco
templates:
  utter_noworries:
  - text: No worries!
  utter_greet:
  - text: 'Hello! I am Gideon. I can help you master the world of Data Science. '
    buttons:
    - title: Code recommendation
      payload: /code_reco
  utter_bye:
  - text: Bye!
  utter_automateEDA:
  - text: "Below is the code to Automate the EDA\n\n #importing sweetviz\n import\
      \ sweetviz as sv\n #analyzing the dataset\n advert_report = sv.analyze(df)\n\
      \ #display the report\n advert_report.show_html('Advertising.html')"
  utter_ask_code:
  - text: Which of the below problems suit your requirement?
    buttons:
    - title: Automate EDA
      payload: /automateEDA_reco
  utter_barchart:
  - text: A Bar chart or graph is a data visualization technique where each category
      is represented by a rectangle. The height of the rectangle is in the propotion
      to the values being plotted. It is also called column chart.
  utter_barchart1:
  - text: 'So you need more details! Fundamentaly, Bar charts is the simplest visualisation
      method to show comparison between the categories. It may be vertical or horizontal. '
  utter_ask_code1:
  - text: Which python library you want to use?
    buttons:
    - title: Matplotlib
      payload: /barchart_matplotlib_reco
    - title: Seaborn
      payload: /barchart_seaborn_reco
    - title: Plotly
      payload: /barchart_plotly_reco
    - title: Bokeh
      payload: /barchart_bokeh_reco
    - title: Ggplot
      payload: /barchart_ggplot_reco
  utter_barchart_matplotlib:
  - text: "Here is the sample code.        \nimport matplotlib.pyplot as\nplt fig\
      \ = plt.figure() \nax = fig.add_axes([0,0,1,1]) \nlangs= \\['C','C++','Java','Python','PHP']\n\
      students = \\[23,17,35,29,12] \nax.bar(langs,students)\nplt.show()"
  utter_barchart_seaborn:
  - text: "Here is the sample code.   \nimport seaborn as sns  \nsns.set(style=\"\
      whitegrid\")\ntips = sns.load_dataset(\"tips\")  \nax = sns.barplot(x=\"day\"\
      ,y=\"total_bill\",data=tips)"
  utter_barchart_plotly:
  - text: "Here is the sample code.      \nimport plotly.graph_objs as go    \nlangs\
      \ =  ('C','C++',  'Java', 'Python', 'PHP')\nstudents = (23,17,35,29,12) \ndata\
      \ =  (go.Bar(x = langs,y = students ))    \nfig = go.Figure(data=data)    \n\
      iplot(fig)"
  utter_linechart:
  - text: Line chart.. it is one of the easiest ways to visualize data. It is used
      to show change of data over a continuous time interval. It is also known as
      Line  graph or Line plot.
  utter_linechart1:
  - text: Line charts are used to track changes over short or long time interval.
      When changes are smaller, Line charts are better than Line charts.
  utter_linechart_matplotlib:
  - text: "Here is the sample code.\nfrom matplotlib import pyplot as plt \nimport\
      \ numpy as np \nimport math #needed for definition of pi \nx = np.arange(0,\
      \ math.pi*2, 0.05)\ny = np.sin(x) plt.plot(x,y) \nplt.xlabel(\"angle\") \nplt.ylabel(\"\
      sine\")\nplt.title('sine wave') \nplt.show()"
  utter_histogram:
  - text: Histogram is a type of visualization chart. It is an approximate representation
      of the distribution of numerical data. It is similar to vertical bar chart.
      It was first introduced by Karl Pearson.
  utter_histogram1:
  - text: A histogram is used to summarize discrete or continuous data. In other words,
      it provides a visual interpretation.
  utter_histogram_matplotlib:
  - text: "Here is the sample code-\nfrom matplotlib \nimport pyplot as plt \nimport\
      \ numpy as np \nfig,ax = plt.subplots(1,1)\na = np.array(\\[22,87,5,43,56,73,55,54,11,20,51,5,79,31,27])\
      \ \nax.hist(a, bins = \\[0,25,50,75,100])\nax.set_title(\"histogram of result\"\
      )\nax.set_xticks(\\[0,25,50,75,100]) \nax.set_xlabel('marks') \nax.set_ylabel('no.\
      \ of students') \nplt.show()"
  utter_barchart_bokeh:
  - text: "Here is the sample code.  \nfrom bokeh.io import output_file, show \nfrom\
      \ bokeh.plotting import figure \noutput_file(\"bars.html\")  \nfruits = \\['Apples','Pears',\
      \ 'Nectarines', 'Plums', 'Grapes', 'Strawberries'] \ncounts = \\[5, 3, 4,2,\
      \ 4, 6]  \np = figure(x_range=fruits, plot_height=250, title=\"Fruit Counts\"\
      , \ntoolbar_location=None, tools=\"\")  \np.vbar(x=fruits, top=counts, width=0.9)\
      \  \np.xgrid.grid_line_color = None \np.y_range.start = 0 \nshow(p)"
  utter_barchart_ggplot:
  - text: "Here is the sample code.  \nfrom ggplot import * \nimport pandas as pd\
      \ \ndf = pd.DataFrame({\"x\":\\[1,2,3,4], \"y\":\\[1,3,4,2]}) \nggplot(aes(x=\"\
      x\", weight=\"y\"), df) + geom_bar()  "
  utter_linechart_seaborn:
  - text: "Here is the sample code:\nimport seaborn as sns;  sns.set()\nfmri = sns.load_dataset(\"\
      fmri\")\nax = sns.lineplot(x=\"timepoint\", y=\"signal\", data=fmri)"
  utter_linechart_plotly:
  - text: "Here is the sample code.\nimport numpy as np\nimport math #needed for definition\
      \ of pi\nxpoints = np.arange(0, math.pi*2, 0.05)\ny1 = np.sin(xpoints)\ny2 =\
      \ np.cos(xpoints)\ntrace0 = go.Scatter(\n  x = xpoints,\n  y = y1,\n  name='Sine'\n\
      )\ntrace1 = go.Scatter(\n  x = xpoints,\n  y = y2,\n  name = 'cos'\n)\ndata\
      \ = [trace0, trace1]\nlayout = go.Layout(title = \"Sine and cos\", xaxis = {'title':'angle'},\
      \ yaxis = {'title':'value'})\nfig = go.Figure(data = data, layout = layout)\n\
      iplot(fig)"
  utter_linechart_bokeh:
  - text: "Here is the sample code.\nfrom bokeh.plotting import figure, output_file,\
      \ show\noutput_file(\"line.html\")\np = figure(plot_width=400, plot_height=400)\n\
      # add a line renderer\np.line([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], line_width=2)\n\
      show(p)"
  utter_linechart_ggplot:
  - text: "Here is the sample code.\nfrom ggplot import ggplot, geom_line, aes\nimport\
      \ pandas as pd\n\ndf = pd.DataFrame({'a': range(10), 'b': range(5, 15), 'c':\
      \ range(7, 17)})\ndf\\['x'] = df.index\nggplot(aes(x='x'), data=df) +\\\n  \
      \  geom_line(aes(y='a'), color='blue') +\\\n    geom_line(aes(y='b'), color='red')\
      \ +\\\n    geom_line(aes(y='c'), color='green')"
  utter_histogram_seaborn:
  - text: "Here is the sample code-\nimport pandas as pd\nimport seaborn as sb\nfrom\
      \ matplotlib import pyplot as plt\ndf = sb.load_dataset('iris')\nsb.distplot(df\\\
      ['petal_length'],kde = False)\nplt.show()"
  utter_histogram_plotly:
  - text: "Here is the sample code-\nimport numpy as np\nx1 = np.array(\\[22,87,5,43,56,73,55,54,11,20,51,5,79,31,27])\n\
      data = \\[go.Histogram(x = x1)]\nfig = go.Figure(data)\niplot(fig)"
  utter_histogram_bokeh:
  - text: "Here is the sample code:\nfrom bokeh.io import output_file, show\nfrom\
      \ bokeh.plotting import figure\nfrom bokeh.sampledata.autompg import autompg\
      \ as df\nfrom numpy import histogram, linspace\nx = linspace(0,250,200)\np =\
      \ figure(plot_height=300)\nhist, edges = histogram(df.hp, density=True, bins=20)\n\
      p.quad(top=hist, bottom=0, left=edges\\[:-1], right=edges\\[1:], alpha=0.4,\n\
      #same technique and properties for every Bokeh Glyph\nline_color=\"red\", line_width=2)\n\
      output_file(\"hist.html\")"
  utter_histogram_ggplot:
  - text: "Here is the sample code-\nimport pandas as pd\na = \\[1, 1, 2, 1, 1, 4,\
      \ 5, 6]\ndf = pd.DataFrame(a, columns=\\['a'])\nfrom ggplot import *\np = ggplot(aes(x='a'),\
      \ data=df)\np + geom_histogram(binwidth=1)"
  utter_piechart:
  - text: 'Pie Chart is a type of graph in which a circle is divided into sectors
      that each represent a proportion of the whole. '
  utter_piechart1:
  - text: Pie chart generally is used to show propotional data for each category.
      It is usually good for displaying data for around 6 categories of fewer.
  utter_ask_code2:
  - text: Which python library you want to use?
    buttons:
    - title: Matplotlib
      payload: /piechart_matplotlib_reco
    - title: Plotly
      payload: /piechart_plotly_reco
    - title: Bokeh
      payload: /piechart_bokeh_reco
actions:
- utter_noworries
- utter_greet
- utter_bye
- utter_automateEDA
- utter_ask_code
- utter_barchart
- utter_ask_barchart
- utter_barchart1
- utter_barchart_plotly
- utter_barchart_bokeh
- utter_barchart_matplotlib
- utter_barchart_ggplot
- utter_barchart_seaborn
- utter_histogram_bokeh
- utter_histogram
- utter_histogram_plotly
- utter_histogram_matplotlib
- utter_histogram_seaborn
- utter_histogram_ggplot
- utter_ask_histogram
- utter_linechart_seaborn
- utter_linechart_plotly
- utter_linechart
- utter_linechart_ggplot
- utter_ask_linechart
- utter_linechart_bokeh
- utter_linechart_matplotlib
- utter_linechart1
- utter_ask_code1
- utter_histogram1
- utter_piechart1
- utter_piechart_matplotlib
- utter_ask_code2
- utter_piechart
